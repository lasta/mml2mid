//オプション定義
options{
    STATIC=false;
    MULTI=true;
    VISITOR=true;
    NODE_EXTENDS="codezine.expr.BaseNode";
}

//パーサークラスの定義
PARSER_BEGIN(ExprParser)
package codezine.expr.parser;
public class ExprParser{

}
PARSER_END(ExprParser)

//トークンの定義
SKIP:
{
    " " | "\r" | "\t" | "\n"
}
TOKEN:
{
        // number
        <NumberZeroToken : "0">
    |   <NonZeroNumberToken : ["1" - "9"]>
    |   <Hex10to15Token : ["a" - "f"]>
    |   <HexNumberXToken : "x">

        // scale
    |   <OctaveToken : ["2" - "8"]>
    |   <ScaleToken : ["a" - "g"]>
    |   <DotToken : ".">

        // Command
    |   <LengthCommandToken : "l">
    |   <OctaveCommandToken : "o">
    |   <ScaleCommandToken : ["+","-"]>
    |   <RestCommandToken : "r">
    |   <IncreaseOctaveCommandToekn : "<">
    |   <DecreaseOctaveCommandToken : ">">
}

//文法の定義
ASTStart Start():
{}
{
    AddExpr() { return jjtThis;}
}

void AddExpr() #void:
{}
{
    Integer() (
           <PLUS>  Integer() #Add(2)
        |  <MINUS> Integer() #Sub(2) ) *
}

void Integer():
{ Token t;}
{
    t = <INTEGER> { jjtThis.nodeValue = t.image;}
}