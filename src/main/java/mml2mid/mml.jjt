//オプション定義
options{
    STATIC=false;
    MULTI=true;
    VISITOR=true;
    NODE_EXTENDS="mml2mid.expr.BaseNode";
    UNICODE_INPUT=true;
}

//パーサークラスの定義
PARSER_BEGIN(MmlParser)
package mml2mid.parser;
public class MmlParser{

}
PARSER_END(MmlParser)

//トークンの定義
SKIP:
{
    " " | "\r" | "\t" | "\n"
}
TOKEN:
{
        // number
        <NumberZeroToken : "0">
    |   <NonZeroNumberToken : ["1" - "9"]>
    |   <Hex10to15Token : ["a" - "f"]>
    |   <HexNumberPrefixToken : "0x">

        // scale
    |   <OctaveToken : ["2" - "8"]>
    |   <ScaleToken : ["a" - "g"]>
    |   <DotToken : ".">

        // Command
    |   <LengthCommandToken : "l">
    |   <OctaveCommandToken : "o">
    |   <AccidentalsCommandToken : ["+","-"]>
    |   <RestCommandToken : "r">
    |   <IncreaseOctaveCommandToekn : "<">
    |   <DecreaseOctaveCommandToken : ">">
}

//文法の定義
// ASTStart Start() #void:
// {}
// {
//     MMLCommands() { return jjtThis;}
// }

void MMLCommands() :
{}
{
    (Command())*
}

void Command() #void:
{}
{
    // notes
    SetLength()
    | SetOctave()
    | SetScale()
    | SetRest()
    // change octave
    | IncreaseOctave()
    | DecreaseOctave()
}

void SetLength() #void:
{}
{
    <LengthCommandToken> Length()
}

void SetOctave() :
{}
{
    <OctaveCommandToken> <OctaveToken>
}

void SetScale() :
{ }
{
    <ScaleToken>
    (<AccidentalsCommandToken>)?
    (Length())?
    (<DotToken>)*
}

void SetRest() :
{}
{
    <RestCommandToken>
    (Length())?
    (<DotToken>)*
}

void IncreaseOctave() :
{ Token t;}
{
    t = <IncreaseOctaveCommandToekn> { jjtThis.nodeValue = t.image; }
}

void DecreaseOctave() :
{ Token t;}
{
    t = <DecreaseOctaveCommandToken> { jjtThis.nodeValue = t.image; }
}

void Length() :
{ Token t;}
{
    t = DecimalNumber() { jjtThis.nodeValue = t.image; }
}

void DecimalNumber() :
{ Token t;}
{
    t = <NonZeroNumberToken> (
          <NumberZeroToken>
        | <NonZeroNumberToken>
    )* { jjtThis.nodeValue = t.image; }
}
