/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. mml.jj */
/*@egen*///\u30aa\u30d7\u30b7\u30e7\u30f3\u5b9a\u7fa9
options{
    STATIC=false;
               
                 
                                         
    UNICODE_INPUT=true;
}

//\u30d1\u30fc\u30b5\u30fc\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9
PARSER_BEGIN(MmlParser)
package mml2mid.parser;
public class MmlParser/*@bgen(jjtree)*/implements MmlParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTMmlParserState jjtree = new JJTMmlParserState();

/*@egen*/

}
PARSER_END(MmlParser)

//\u30c8\u30fc\u30af\u30f3\u306e\u5b9a\u7fa9
SKIP:
{
    " " | "\r" | "\t" | "\n"
}
TOKEN:
{
        // number
        <NumberZeroToken : "0">
    |   <NonZeroNumberToken : ["1" - "9"]>
    |   <Hex10to15Token : ["a" - "f"]>
    |   <HexNumberPrefixToken : "0x">

        // scale
    |   <OctaveToken : ["2" - "8"]>
    |   <ScaleToken : ["a" - "g"]>
    |   <DotToken : ".">

        // Command
    |   <LengthCommandToken : "l">
    |   <OctaveCommandToken : "o">
    |   <AccidentalsCommandToken : ["+","-"]>
    |   <RestCommandToken : "r">
    |   <IncreaseOctaveCommandToekn : "<">
    |   <DecreaseOctaveCommandToken : ">">
}

//\u6587\u6cd5\u306e\u5b9a\u7fa9
ASTStart Start()      :
{}
{
    MMLCommands() { return jjtn000;}
}

void MMLCommands()      :
{}
{
    (Command())*
}

void Command()      :
{}
{
    // notes
    SetLength()
    | SetOctave()
    | SetScale()
    | SetRest()
    // change octave
    | IncreaseOctave()
    | DecreaseOctave()
}

void SetLength()      :
{}
{
    <LengthCommandToken> Length()
}

void SetOctave() :
{/*@bgen(jjtree) SetOctave */
  ASTSetOctave jjtn000 = new ASTSetOctave(JJTSETOCTAVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetOctave */
    try {
/*@egen*/
    <OctaveCommandToken> <OctaveToken>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SetScale() :
{/*@bgen(jjtree) SetScale */
  ASTSetScale jjtn000 = new ASTSetScale(JJTSETSCALE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SetScale */
    try {
/*@egen*/
    <ScaleToken>
    (<AccidentalsCommandToken>)?
    (Length())?
    (<DotToken>)*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SetRest() :
{/*@bgen(jjtree) SetRest */
  ASTSetRest jjtn000 = new ASTSetRest(JJTSETREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetRest */
    try {
/*@egen*/
    <RestCommandToken>
    (Length())?
    (<DotToken>)*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IncreaseOctave() :
{/*@bgen(jjtree) IncreaseOctave */
  ASTIncreaseOctave jjtn000 = new ASTIncreaseOctave(JJTINCREASEOCTAVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IncreaseOctave */
    try {
/*@egen*/
    <IncreaseOctaveCommandToekn>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DecreaseOctave() :
{/*@bgen(jjtree) DecreaseOctave */
  ASTDecreaseOctave jjtn000 = new ASTDecreaseOctave(JJTDECREASEOCTAVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DecreaseOctave */
    try {
/*@egen*/
    <DecreaseOctaveCommandToken>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Length()      :
{}
{
    DecimalNumber()
}

void DecimalNumber()      :
{ Token t;}
{
    t = <NonZeroNumberToken> (
          <NumberZeroToken>
        | <NonZeroNumberToken>
    )* { jjtn000.nodeValue = t.image; }
}